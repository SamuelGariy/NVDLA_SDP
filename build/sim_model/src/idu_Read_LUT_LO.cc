#include <sdp.h>
bool sdp::decode_sdp_Read_LUT_LO() {
auto local_var_1 = sdp_s_lut_access_type.range(0, 0);
sc_biguint<1> local_var_2 = 0;
bool local_var_3 = (local_var_1 == local_var_2);
auto local_var_5 = sdp_s_lut_table_id.range(0, 0);
sc_biguint<1> local_var_6 = 1;
bool local_var_7 = (local_var_5 == local_var_6);
bool local_var_8 = (local_var_3 & local_var_7);
auto local_var_10 = sdp_group0_d_ew_lut_bypass.range(0, 0);
sc_biguint<1> local_var_11 = 0;
bool local_var_12 = (local_var_10 == local_var_11);
bool local_var_13 = (local_var_8 & local_var_12);
auto& univ_var_315 = local_var_13;
return univ_var_315;
}
void sdp::update_sdp_Read_LUT_LO() {
sc_biguint<16> local_var_0 = 0;
univ_var_316 = (sc_biguint<16>(local_var_0), sc_biguint<16>(sdp_s_lut_data));
bool local_var_4 = (univ_var_316 == sdp_s_lut_lo_start);
bool local_var_5 = (univ_var_316 < sdp_s_lut_lo_start);
bool local_var_6 = (local_var_4 | local_var_5);
sc_biguint<32> local_var_7 = 0;
sc_biguint<16> local_var_8 = 0;
univ_var_317 = (sc_biguint<16>(local_var_8), sc_biguint<16>(sdp_s_lut_data));
sc_biguint<32> local_var_10 = (univ_var_317 - sdp_s_lut_lo_start);
sc_biguint<24> local_var_11 = 0;
univ_var_318 = (sc_biguint<24>(local_var_11), sc_biguint<8>(sdp_s_lut_lo_index_select));
sc_biguint<32> local_var_14 = (local_var_10 >> univ_var_318);
sc_biguint<32> local_var_15 = 256;
bool local_var_16 = (local_var_14 == local_var_15);
bool local_var_17 = (local_var_14 > local_var_15);
bool local_var_18 = (local_var_16 | local_var_17);
sc_biguint<32> local_var_19 = 0;
sc_biguint<32> local_var_20 = 1;
sc_biguint<24> local_var_21 = 0;
univ_var_319 = (sc_biguint<24>(local_var_21), sc_biguint<8>(sdp_s_lut_lo_index_select));
sc_biguint<32> local_var_23 = (local_var_20 << univ_var_319);
sc_biguint<32> local_var_24 = 1;
sc_biguint<32> local_var_25 = (local_var_23 - local_var_24);
sc_biguint<32> local_var_26 = (local_var_10 & local_var_25);
sc_biguint<24> local_var_27 = 0;
univ_var_320 = (sc_biguint<24>(local_var_27), sc_biguint<8>(sdp_s_lut_lo_index_select));
sc_biguint<32> local_var_29 = 35;
sc_biguint<32> local_var_30 = (univ_var_320 - local_var_29);
sc_biguint<32> local_var_31 = (local_var_26 >> local_var_30);
auto local_var_32 = (local_var_18) ? local_var_19 : local_var_31;
auto local_var_33 = (local_var_6) ? local_var_7 : local_var_32;
auto local_var_34 = local_var_33.range(8, 0);
auto local_var_34_nxt_holder = local_var_34;
sc_biguint<16> local_var_35 = 0;
univ_var_321 = (sc_biguint<16>(local_var_35), sc_biguint<16>(sdp_s_lut_data));
bool local_var_37 = (univ_var_321 == sdp_s_lut_lo_start);
bool local_var_38 = (univ_var_321 < sdp_s_lut_lo_start);
bool local_var_39 = (local_var_37 | local_var_38);
sc_biguint<32> local_var_40 = 0;
sc_biguint<32> local_var_41 = 256;
bool local_var_42 = (local_var_14 == local_var_41);
bool local_var_43 = (local_var_14 > local_var_41);
bool local_var_44 = (local_var_42 | local_var_43);
sc_biguint<32> local_var_45 = 256;
auto local_var_46 = (local_var_44) ? local_var_45 : local_var_14;
auto local_var_47 = (local_var_39) ? local_var_40 : local_var_46;
auto local_var_48 = local_var_47.range(8, 0);
auto local_var_48_nxt_holder = local_var_48;
sc_biguint<16> local_var_49 = 0;
univ_var_322 = (sc_biguint<16>(local_var_49), sc_biguint<16>(sdp_s_lut_data));
bool local_var_51 = (univ_var_322 == sdp_s_lut_lo_start);
bool local_var_52 = (univ_var_322 < sdp_s_lut_lo_start);
bool local_var_53 = (local_var_51 | local_var_52);
sc_biguint<1> local_var_54 = 0;
sc_biguint<32> local_var_55 = 256;
bool local_var_56 = (local_var_14 == local_var_55);
bool local_var_57 = (local_var_14 > local_var_55);
bool local_var_58 = (local_var_56 | local_var_57);
sc_biguint<1> local_var_59 = 1;
sc_biguint<1> local_var_60 = 0;
auto local_var_61 = (local_var_58) ? local_var_59 : local_var_60;
auto local_var_62 = (local_var_53) ? local_var_54 : local_var_61;
auto local_var_62_nxt_holder = local_var_62;
sc_biguint<16> local_var_63 = 0;
univ_var_323 = (sc_biguint<16>(local_var_63), sc_biguint<16>(sdp_s_lut_data));
bool local_var_65 = (univ_var_323 == sdp_s_lut_lo_start);
bool local_var_66 = (univ_var_323 < sdp_s_lut_lo_start);
bool local_var_67 = (local_var_65 | local_var_66);
sc_biguint<1> local_var_68 = 1;
sc_biguint<1> local_var_69 = 0;
auto local_var_70 = (local_var_67) ? local_var_68 : local_var_69;
auto local_var_70_nxt_holder = local_var_70;
sdp_lo_fraction = local_var_34_nxt_holder;
sdp_lo_index = local_var_48_nxt_holder;
sdp_lo_oflow = local_var_62_nxt_holder;
sdp_lo_uflow = local_var_70_nxt_holder;
#ifdef ILATOR_VERBOSE
instr_update_log << "No." << std::dec << GetInstrCntr() << '\t' << "Read_LUT_LO state updates:" << std::endl;
instr_update_log << "    sdp_lo_fraction => " << std::hex << "0x" << sdp_lo_fraction << std::endl; 
instr_update_log << "    sdp_lo_index => " << std::hex << "0x" << sdp_lo_index << std::endl; 
instr_update_log << "    sdp_lo_oflow => " << std::hex << "0x" << sdp_lo_oflow << std::endl; 
instr_update_log << "    sdp_lo_uflow => " << std::hex << "0x" << sdp_lo_uflow << std::endl; 
instr_update_log << std::endl;
#endif
}
